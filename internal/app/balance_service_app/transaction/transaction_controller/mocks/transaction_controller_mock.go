// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	transaction "Avito-Internship-Task/internal/app/balance_service_app/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionControllerInterface is a mock of TransactionControllerInterface interface.
type MockTransactionControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionControllerInterfaceMockRecorder
}

// MockTransactionControllerInterfaceMockRecorder is the mock recorder for MockTransactionControllerInterface.
type MockTransactionControllerInterfaceMockRecorder struct {
	mock *MockTransactionControllerInterface
}

// NewMockTransactionControllerInterface creates a new mock instance.
func NewMockTransactionControllerInterface(ctrl *gomock.Controller) *MockTransactionControllerInterface {
	mock := &MockTransactionControllerInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionControllerInterface) EXPECT() *MockTransactionControllerInterfaceMockRecorder {
	return m.recorder
}

// AddNewRecordBuyService mocks base method.
func (m *MockTransactionControllerInterface) AddNewRecordBuyService(userID int64, sum float64, serviceID int64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRecordBuyService", userID, sum, serviceID, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewRecordBuyService indicates an expected call of AddNewRecordBuyService.
func (mr *MockTransactionControllerInterfaceMockRecorder) AddNewRecordBuyService(userID, sum, serviceID, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRecordBuyService", reflect.TypeOf((*MockTransactionControllerInterface)(nil).AddNewRecordBuyService), userID, sum, serviceID, comments)
}

// AddNewRecordRefillBalance mocks base method.
func (m *MockTransactionControllerInterface) AddNewRecordRefillBalance(userID int64, sum float64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRecordRefillBalance", userID, sum, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewRecordRefillBalance indicates an expected call of AddNewRecordRefillBalance.
func (mr *MockTransactionControllerInterfaceMockRecorder) AddNewRecordRefillBalance(userID, sum, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRecordRefillBalance", reflect.TypeOf((*MockTransactionControllerInterface)(nil).AddNewRecordRefillBalance), userID, sum, comments)
}

// AddNewRecordReturnService mocks base method.
func (m *MockTransactionControllerInterface) AddNewRecordReturnService(userID int64, sum float64, serviceID int64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRecordReturnService", userID, sum, serviceID, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewRecordReturnService indicates an expected call of AddNewRecordReturnService.
func (mr *MockTransactionControllerInterfaceMockRecorder) AddNewRecordReturnService(userID, sum, serviceID, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRecordReturnService", reflect.TypeOf((*MockTransactionControllerInterface)(nil).AddNewRecordReturnService), userID, sum, serviceID, comments)
}

// AddNewRecordTransferFrom mocks base method.
func (m *MockTransactionControllerInterface) AddNewRecordTransferFrom(srcUserID, dstUserID int64, sum float64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRecordTransferFrom", srcUserID, dstUserID, sum, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewRecordTransferFrom indicates an expected call of AddNewRecordTransferFrom.
func (mr *MockTransactionControllerInterfaceMockRecorder) AddNewRecordTransferFrom(srcUserID, dstUserID, sum, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRecordTransferFrom", reflect.TypeOf((*MockTransactionControllerInterface)(nil).AddNewRecordTransferFrom), srcUserID, dstUserID, sum, comments)
}

// AddNewRecordTransferTo mocks base method.
func (m *MockTransactionControllerInterface) AddNewRecordTransferTo(srcUserID, dstUserID int64, sum float64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRecordTransferTo", srcUserID, dstUserID, sum, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewRecordTransferTo indicates an expected call of AddNewRecordTransferTo.
func (mr *MockTransactionControllerInterfaceMockRecorder) AddNewRecordTransferTo(srcUserID, dstUserID, sum, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRecordTransferTo", reflect.TypeOf((*MockTransactionControllerInterface)(nil).AddNewRecordTransferTo), srcUserID, dstUserID, sum, comments)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionControllerInterface) GetTransactionByID(transactionID int64) (transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", transactionID)
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionControllerInterfaceMockRecorder) GetTransactionByID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionControllerInterface)(nil).GetTransactionByID), transactionID)
}

// GetUserTransactions mocks base method.
func (m *MockTransactionControllerInterface) GetUserTransactions(userID int64, orderBy string, limit, offset int) ([]transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactions", userID, orderBy, limit, offset)
	ret0, _ := ret[0].([]transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactions indicates an expected call of GetUserTransactions.
func (mr *MockTransactionControllerInterfaceMockRecorder) GetUserTransactions(userID, orderBy, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactions", reflect.TypeOf((*MockTransactionControllerInterface)(nil).GetUserTransactions), userID, orderBy, limit, offset)
}
