// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	transaction "Avito-Internship-Task/internal/app/balance_service_app/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepoInterface is a mock of TransactionRepoInterface interface.
type MockTransactionRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoInterfaceMockRecorder
}

// MockTransactionRepoInterfaceMockRecorder is the mock recorder for MockTransactionRepoInterface.
type MockTransactionRepoInterfaceMockRecorder struct {
	mock *MockTransactionRepoInterface
}

// NewMockTransactionRepoInterface creates a new mock instance.
func NewMockTransactionRepoInterface(ctrl *gomock.Controller) *MockTransactionRepoInterface {
	mock := &MockTransactionRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepoInterface) EXPECT() *MockTransactionRepoInterfaceMockRecorder {
	return m.recorder
}

// AddNewTransaction mocks base method.
func (m *MockTransactionRepoInterface) AddNewTransaction(newTransaction transaction.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewTransaction", newTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewTransaction indicates an expected call of AddNewTransaction.
func (mr *MockTransactionRepoInterfaceMockRecorder) AddNewTransaction(newTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewTransaction", reflect.TypeOf((*MockTransactionRepoInterface)(nil).AddNewTransaction), newTransaction)
}

// GetAllTransactions mocks base method.
func (m *MockTransactionRepoInterface) GetAllTransactions() ([]transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions")
	ret0, _ := ret[0].([]transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetAllTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetAllTransactions))
}

// GetTransactionByID mocks base method.
func (m *MockTransactionRepoInterface) GetTransactionByID(transactionID int64) (transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", transactionID)
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetTransactionByID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetTransactionByID), transactionID)
}

// GetUserTransactions mocks base method.
func (m *MockTransactionRepoInterface) GetUserTransactions(userID int64) ([]transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactions", userID)
	ret0, _ := ret[0].([]transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactions indicates an expected call of GetUserTransactions.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetUserTransactions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactions", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetUserTransactions), userID)
}
