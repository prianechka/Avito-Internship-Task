// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	order "Avito-Internship-Task/internal/app/balance_service_app/order"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepoInterface is a mock of OrderRepoInterface interface.
type MockOrderRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoInterfaceMockRecorder
}

// MockOrderRepoInterfaceMockRecorder is the mock recorder for MockOrderRepoInterface.
type MockOrderRepoInterfaceMockRecorder struct {
	mock *MockOrderRepoInterface
}

// NewMockOrderRepoInterface creates a new mock instance.
func NewMockOrderRepoInterface(ctrl *gomock.Controller) *MockOrderRepoInterface {
	mock := &MockOrderRepoInterface{ctrl: ctrl}
	mock.recorder = &MockOrderRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepoInterface) EXPECT() *MockOrderRepoInterfaceMockRecorder {
	return m.recorder
}

// ChangeOrderState mocks base method.
func (m *MockOrderRepoInterface) ChangeOrderState(orderID, orderState int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderState", orderID, orderState)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrderState indicates an expected call of ChangeOrderState.
func (mr *MockOrderRepoInterfaceMockRecorder) ChangeOrderState(orderID, orderState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderState", reflect.TypeOf((*MockOrderRepoInterface)(nil).ChangeOrderState), orderID, orderState)
}

// CreateOrder mocks base method.
func (m *MockOrderRepoInterface) CreateOrder(order order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoInterfaceMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepoInterface)(nil).CreateOrder), order)
}

// GetAllOrders mocks base method.
func (m *MockOrderRepoInterface) GetAllOrders() ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderRepoInterfaceMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderRepoInterface)(nil).GetAllOrders))
}

// GetOrderByID mocks base method.
func (m *MockOrderRepoInterface) GetOrderByID(orderID int64) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", orderID)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepoInterfaceMockRecorder) GetOrderByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepoInterface)(nil).GetOrderByID), orderID)
}

// GetServiceOrders mocks base method.
func (m *MockOrderRepoInterface) GetServiceOrders(serviceType int64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceOrders", serviceType)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceOrders indicates an expected call of GetServiceOrders.
func (mr *MockOrderRepoInterfaceMockRecorder) GetServiceOrders(serviceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceOrders", reflect.TypeOf((*MockOrderRepoInterface)(nil).GetServiceOrders), serviceType)
}

// GetUserOrders mocks base method.
func (m *MockOrderRepoInterface) GetUserOrders(userID int64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", userID)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderRepoInterfaceMockRecorder) GetUserOrders(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderRepoInterface)(nil).GetUserOrders), userID)
}
