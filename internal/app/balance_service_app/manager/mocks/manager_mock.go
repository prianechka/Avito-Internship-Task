// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManagerInterface is a mock of ManagerInterface interface.
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface.
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance.
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// AcceptBuy mocks base method.
func (m *MockManagerInterface) AcceptBuy(userID, orderID, serviceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptBuy", userID, orderID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptBuy indicates an expected call of AcceptBuy.
func (mr *MockManagerInterfaceMockRecorder) AcceptBuy(userID, orderID, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptBuy", reflect.TypeOf((*MockManagerInterface)(nil).AcceptBuy), userID, orderID, serviceID)
}

// BuyService mocks base method.
func (m *MockManagerInterface) BuyService(userID, orderID, serviceID int64, sum float64, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyService", userID, orderID, serviceID, sum, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyService indicates an expected call of BuyService.
func (mr *MockManagerInterfaceMockRecorder) BuyService(userID, orderID, serviceID, sum, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyService", reflect.TypeOf((*MockManagerInterface)(nil).BuyService), userID, orderID, serviceID, sum, comment)
}

// GetReport mocks base method.
func (m *MockManagerInterface) GetReport() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReport indicates an expected call of GetReport.
func (mr *MockManagerInterfaceMockRecorder) GetReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockManagerInterface)(nil).GetReport))
}

// GetUserBalance mocks base method.
func (m *MockManagerInterface) GetUserBalance(userID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockManagerInterfaceMockRecorder) GetUserBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockManagerInterface)(nil).GetUserBalance), userID)
}

// GetUserReport mocks base method.
func (m *MockManagerInterface) GetUserReport() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReport")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserReport indicates an expected call of GetUserReport.
func (mr *MockManagerInterfaceMockRecorder) GetUserReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReport", reflect.TypeOf((*MockManagerInterface)(nil).GetUserReport))
}

// RefillBalance mocks base method.
func (m *MockManagerInterface) RefillBalance(userID int64, sum float64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefillBalance", userID, sum, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefillBalance indicates an expected call of RefillBalance.
func (mr *MockManagerInterfaceMockRecorder) RefillBalance(userID, sum, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefillBalance", reflect.TypeOf((*MockManagerInterface)(nil).RefillBalance), userID, sum, comments)
}

// RefuseBuy mocks base method.
func (m *MockManagerInterface) RefuseBuy(userID, orderID, serviceID int64, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefuseBuy", userID, orderID, serviceID, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefuseBuy indicates an expected call of RefuseBuy.
func (mr *MockManagerInterfaceMockRecorder) RefuseBuy(userID, orderID, serviceID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefuseBuy", reflect.TypeOf((*MockManagerInterface)(nil).RefuseBuy), userID, orderID, serviceID, comment)
}

// Transfer mocks base method.
func (m *MockManagerInterface) Transfer(srcUserID, dstUserID int64, sum float64, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", srcUserID, dstUserID, sum, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockManagerInterfaceMockRecorder) Transfer(srcUserID, dstUserID, sum, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockManagerInterface)(nil).Transfer), srcUserID, dstUserID, sum, comment)
}
