// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountManagerInterface is a mock of AccountManagerInterface interface.
type MockAccountManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerInterfaceMockRecorder
}

// MockAccountManagerInterfaceMockRecorder is the mock recorder for MockAccountManagerInterface.
type MockAccountManagerInterfaceMockRecorder struct {
	mock *MockAccountManagerInterface
}

// NewMockAccountManagerInterface creates a new mock instance.
func NewMockAccountManagerInterface(ctrl *gomock.Controller) *MockAccountManagerInterface {
	mock := &MockAccountManagerInterface{ctrl: ctrl}
	mock.recorder = &MockAccountManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountManagerInterface) EXPECT() *MockAccountManagerInterfaceMockRecorder {
	return m.recorder
}

// CheckAbleToBuyService mocks base method.
func (m *MockAccountManagerInterface) CheckAbleToBuyService(userID int, servicePrice float64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAbleToBuyService", userID, servicePrice)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAbleToBuyService indicates an expected call of CheckAbleToBuyService.
func (mr *MockAccountManagerInterfaceMockRecorder) CheckAbleToBuyService(userID, servicePrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAbleToBuyService", reflect.TypeOf((*MockAccountManagerInterface)(nil).CheckAbleToBuyService), userID, servicePrice)
}

// CheckAccountIsExist mocks base method.
func (m *MockAccountManagerInterface) CheckAccountIsExist(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccountIsExist", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccountIsExist indicates an expected call of CheckAccountIsExist.
func (mr *MockAccountManagerInterfaceMockRecorder) CheckAccountIsExist(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccountIsExist", reflect.TypeOf((*MockAccountManagerInterface)(nil).CheckAccountIsExist), userID)
}

// CheckBalance mocks base method.
func (m *MockAccountManagerInterface) CheckBalance(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBalance", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBalance indicates an expected call of CheckBalance.
func (mr *MockAccountManagerInterfaceMockRecorder) CheckBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBalance", reflect.TypeOf((*MockAccountManagerInterface)(nil).CheckBalance), userID)
}

// CreateNewAccount mocks base method.
func (m *MockAccountManagerInterface) CreateNewAccount(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewAccount", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewAccount indicates an expected call of CreateNewAccount.
func (mr *MockAccountManagerInterfaceMockRecorder) CreateNewAccount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewAccount", reflect.TypeOf((*MockAccountManagerInterface)(nil).CreateNewAccount), userID)
}

// DonateMoney mocks base method.
func (m *MockAccountManagerInterface) DonateMoney(userID int, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DonateMoney", userID, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// DonateMoney indicates an expected call of DonateMoney.
func (mr *MockAccountManagerInterfaceMockRecorder) DonateMoney(userID, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DonateMoney", reflect.TypeOf((*MockAccountManagerInterface)(nil).DonateMoney), userID, sum)
}

// SpendMoney mocks base method.
func (m *MockAccountManagerInterface) SpendMoney(userID int, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendMoney", userID, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpendMoney indicates an expected call of SpendMoney.
func (mr *MockAccountManagerInterfaceMockRecorder) SpendMoney(userID, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendMoney", reflect.TypeOf((*MockAccountManagerInterface)(nil).SpendMoney), userID, sum)
}
