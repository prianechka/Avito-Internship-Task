// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderManagerInterface is a mock of OrderManagerInterface interface.
type MockOrderManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagerInterfaceMockRecorder
}

// MockOrderManagerInterfaceMockRecorder is the mock recorder for MockOrderManagerInterface.
type MockOrderManagerInterfaceMockRecorder struct {
	mock *MockOrderManagerInterface
}

// NewMockOrderManagerInterface creates a new mock instance.
func NewMockOrderManagerInterface(ctrl *gomock.Controller) *MockOrderManagerInterface {
	mock := &MockOrderManagerInterface{ctrl: ctrl}
	mock.recorder = &MockOrderManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManagerInterface) EXPECT() *MockOrderManagerInterfaceMockRecorder {
	return m.recorder
}

// AcceptBuy mocks base method.
func (m *MockOrderManagerInterface) AcceptBuy(userID, orderID, serviceID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptBuy", userID, orderID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptBuy indicates an expected call of AcceptBuy.
func (mr *MockOrderManagerInterfaceMockRecorder) AcceptBuy(userID, orderID, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptBuy", reflect.TypeOf((*MockOrderManagerInterface)(nil).AcceptBuy), userID, orderID, serviceID)
}

// BuyService mocks base method.
func (m *MockOrderManagerInterface) BuyService(userID, orderID, serviceID int, sum float64, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyService", userID, orderID, serviceID, sum, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyService indicates an expected call of BuyService.
func (mr *MockOrderManagerInterfaceMockRecorder) BuyService(userID, orderID, serviceID, sum, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyService", reflect.TypeOf((*MockOrderManagerInterface)(nil).BuyService), userID, orderID, serviceID, sum, comment)
}

// RefuseBuy mocks base method.
func (m *MockOrderManagerInterface) RefuseBuy(userID, orderID, serviceID int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefuseBuy", userID, orderID, serviceID, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefuseBuy indicates an expected call of RefuseBuy.
func (mr *MockOrderManagerInterfaceMockRecorder) RefuseBuy(userID, orderID, serviceID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefuseBuy", reflect.TypeOf((*MockOrderManagerInterface)(nil).RefuseBuy), userID, orderID, serviceID, comment)
}
