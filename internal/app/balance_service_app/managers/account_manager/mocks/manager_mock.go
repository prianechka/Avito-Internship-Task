// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountManagerInterface is a mock of AccountManagerInterface interface.
type MockAccountManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerInterfaceMockRecorder
}

// MockAccountManagerInterfaceMockRecorder is the mock recorder for MockAccountManagerInterface.
type MockAccountManagerInterfaceMockRecorder struct {
	mock *MockAccountManagerInterface
}

// NewMockAccountManagerInterface creates a new mock instance.
func NewMockAccountManagerInterface(ctrl *gomock.Controller) *MockAccountManagerInterface {
	mock := &MockAccountManagerInterface{ctrl: ctrl}
	mock.recorder = &MockAccountManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountManagerInterface) EXPECT() *MockAccountManagerInterfaceMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockAccountManagerInterface) GetUserBalance(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockAccountManagerInterfaceMockRecorder) GetUserBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockAccountManagerInterface)(nil).GetUserBalance), userID)
}

// RefillBalance mocks base method.
func (m *MockAccountManagerInterface) RefillBalance(userID int, sum float64, comments string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefillBalance", userID, sum, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefillBalance indicates an expected call of RefillBalance.
func (mr *MockAccountManagerInterfaceMockRecorder) RefillBalance(userID, sum, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefillBalance", reflect.TypeOf((*MockAccountManagerInterface)(nil).RefillBalance), userID, sum, comments)
}

// Transfer mocks base method.
func (m *MockAccountManagerInterface) Transfer(srcUserID, dstUserID int, sum float64, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", srcUserID, dstUserID, sum, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockAccountManagerInterfaceMockRecorder) Transfer(srcUserID, dstUserID, sum, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockAccountManagerInterface)(nil).Transfer), srcUserID, dstUserID, sum, comment)
}
