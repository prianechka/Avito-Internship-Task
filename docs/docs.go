// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2022-11-15 15:40:44.196052362 +0300 +03 m=+0.032060487

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/accounts": {
            "get": {
                "description": "get user balance",
                "produces": [
                    "application/json"
                ],
                "summary": "get user balance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user_id in balanceApp",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BalanceResponseMessage"
                        }
                    },
                    "400": {
                        "description": "userID not found | userID isn't number",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/accounts/refill": {
            "post": {
                "description": "users refill balance in the app",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "refill user balance",
                "parameters": [
                    {
                        "description": "body for transfer money",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.RefillMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "400": {
                        "description": "invalid body params",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "422": {
                        "description": "sum must be \u003e 0",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/finance": {
            "get": {
                "description": "generate report of company's revenue with csv format",
                "produces": [
                    "application/json"
                ],
                "summary": "get finance report of company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "required month",
                        "name": "month",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "required year",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FinanceReportResponseMessage"
                        }
                    },
                    "400": {
                        "description": "month not found | year not found | incorrect month | incorrect year",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/user": {
            "get": {
                "description": "get report of all user financial operations with pagination",
                "produces": [
                    "application/json"
                ],
                "summary": "get report of user operations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "userID for report",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "required field to sort",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit to paginate query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset to paginate query",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserReportResponseMessage"
                        }
                    },
                    "400": {
                        "description": "userID not found | userID isn't number | limit isn't number | offset isn't number",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/services/accept": {
            "post": {
                "description": "service bought by user is accepted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "service accepted",
                "parameters": [
                    {
                        "description": "body for accept service",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.AcceptServiceMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "400": {
                        "description": "invalid body params",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "403": {
                        "description": "state isn't right to change order state",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "404": {
                        "description": "order not found",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/services/buy": {
            "post": {
                "description": "user buy service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "user buy service",
                "parameters": [
                    {
                        "description": "body for buy service",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.BuyServiceMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "400": {
                        "description": "invalid body params",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "422": {
                        "description": "not enough money | sum must be \u003e 0",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/services/refuse": {
            "post": {
                "description": "service bought by user is refused and money returned to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "service refused",
                "parameters": [
                    {
                        "description": "body for refuse service",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.RefuseServiceMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "400": {
                        "description": "invalid body params",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "403": {
                        "description": "state isn't right to change order state",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "404": {
                        "description": "order not found",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v1/transfer": {
            "post": {
                "description": "money transfer between users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "transfer money from account to another account",
                "parameters": [
                    {
                        "description": "body for transfer money",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.TransferMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "400": {
                        "description": "invalid body params",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "401": {
                        "description": "account is not exist",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "422": {
                        "description": "not enough money",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ShortResponseMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BalanceResponseMessage": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "comment": {
                    "type": "string"
                }
            }
        },
        "models.FinanceReportResponseMessage": {
            "type": "object",
            "properties": {
                "fileURL": {
                    "type": "string"
                }
            }
        },
        "models.ShortResponseMessage": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                }
            }
        },
        "models.UserReportResponseMessage": {
            "type": "object",
            "properties": {
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transaction.Transaction"
                    }
                }
            }
        },
        "request_models.AcceptServiceMessage": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "integer"
                },
                "service_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request_models.BuyServiceMessage": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer"
                },
                "service_id": {
                    "type": "integer"
                },
                "sum": {
                    "type": "number"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request_models.RefillMessage": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "sum": {
                    "type": "number"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request_models.RefuseServiceMessage": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer"
                },
                "service_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request_models.TransferMessage": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "dst_user_id": {
                    "type": "integer"
                },
                "src_user_id": {
                    "type": "integer"
                },
                "sum": {
                    "type": "number"
                }
            }
        },
        "transaction.Transaction": {
            "type": "object",
            "properties": {
                "actionComments": {
                    "type": "string"
                },
                "addComments": {
                    "type": "string"
                },
                "sum": {
                    "type": "number"
                },
                "time": {
                    "type": "string"
                },
                "transactionID": {
                    "type": "integer"
                },
                "transactionType": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
